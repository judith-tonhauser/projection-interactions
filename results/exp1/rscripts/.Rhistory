agr$YMax = agr$Response + agr$CIHigh
dodge = position_dodge(.9)
agr
agr2 = aggregate(Response ~ Adj + SentenceType, data=cd.target, FUN="mean")
agr2
cd.target <- droplevels(subset(t, t$Adj != "none"))
nrow(cd.target) #680 = 68 Turkers x 10 adjectives
table(cd.target$SentenceType)
str(cd.target$Response)
table(cd.target$Response)
agr = aggregate(Response ~ SentenceType, data=cd.target, FUN="mean")
agr$CILow = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.low")$Response
agr$CIHigh = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.high")$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
dodge = position_dodge(.9)
agr
agr2 = aggregate(Response ~ Adj + SentenceType, data=cd.target, FUN="mean")
agr2
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj)) +
geom_text(data = subset(agr2, SentenceType == "less likely" & (Adj != "polite" & Adj != "wise" & Adj != "fortunate" & Adj != "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=1.3) +
geom_text(data = subset(agr2, SentenceType == "more likely" & (Adj == "polite" | Adj == "wise" | Adj == "fortunate" | Adj == "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=-.2) +
scale_x_discrete(name="Truth of generalization follows from common ground") +
scale_y_continuous(name="Proportion of `yes' responses")
#theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggsave(f="../graphs/proportion-ai-by-condition.pdf",height=4,width=3.8)
# Figure 7
# target items only: proportion of 'yes' responses (ai) by condition, with error bars
# mean for each adjective overlaid
cd.target <- droplevels(subset(t, t$Adj != "none"))
nrow(cd.target) #680 = 68 Turkers x 10 adjectives
table(cd.target$SentenceType)
str(cd.target$Response)
table(cd.target$Response)
agr = aggregate(Response ~ SentenceType, data=cd.target, FUN="mean")
agr$CILow = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.low")$Response
agr$CIHigh = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.high")$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
dodge = position_dodge(.9)
agr
agr2 = aggregate(Response ~ Adj + SentenceType, data=cd.target, FUN="mean")
agr2
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj)) +
geom_text(data = subset(agr2, SentenceType == "less likely" & (Adj != "polite" & Adj != "wise" & Adj != "fortunate" & Adj != "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=1.3) +
geom_text(data = subset(agr2, SentenceType == "more likely" & (Adj == "polite" | Adj == "wise" | Adj == "fortunate" | Adj == "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=-.2) +
scale_x_discrete(name="Truth of generalization follows from common ground") +
scale_y_continuous(name="Proportion of `yes' responses")
#theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggsave(f="../graphs/proportion-ai-by-condition.pdf",height=4,width=3.8)
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none")
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj))
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj)) +
geom_text(data = subset(agr2, SentenceType == "less likely" & (Adj != "polite" & Adj != "wise" & Adj != "fortunate" & Adj != "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=1.3) +
geom_text(data = subset(agr2, SentenceType == "more likely" & (Adj == "polite" | Adj == "wise" | Adj == "fortunate" | Adj == "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=-.2)
nrow(cd.target) #680 = 68 Turkers x 10 adjectives
table(cd.target$SentenceType)
str(cd.target$Response)
table(cd.target$Response)
agr = aggregate(Response ~ SentenceType, data=cd.target, FUN="mean")
agr$CILow = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.low")$Response
agr$CIHigh = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.high")$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
dodge = position_dodge(.9)
agr
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
library(tidyverse)
theme_set(theme_bw())
# load clean data
load("../data/cd.RData")
nrow(cd) #1088 = 68 Turkers x 16 ratings
# recode responses so that 1 = yes (ai) and 0 = no (nai)
table(cd$Response)
cd$Response <- gsub("0","2",cd$Response) #change 1 (no) to 2
cd$Response <- gsub("1","0",cd$Response) #change 0 (yes) to 1
cd$Response <- gsub("2","1",cd$Response) #now change 2 (no) to 0
## exclude main clauses from plotting (since they are 100% at-issue, given exclusion of Turkers)
t <- droplevels(subset(cd, cd$ID != "mainclause1" & cd$ID != "mainclause2"))
nrow(t) #952 = 68 Turkers x 14 ratings (10 EAS, 4 projective content)
str(t$Response)
t$Response <- as.numeric(t$Response)
str(t$SentenceType)
t$SentenceType <- as.factor(t$SentenceType)
table(t$SentenceType)
# rename factor levels
t$SentenceType <- factor(t$SentenceType,
levels=c("Comp-of-Annoyed", "Comp-of-Discover","NomApp","PossNP","EAS_n","EAS_f"),
labels=c("be_annoyed","discover","NomApp","possNP","less likely","more likely"))
table(t$Adj)
# Figure 7
# target items only: proportion of 'yes' responses (ai) by condition, with error bars
# mean for each adjective overlaid
cd.target <- droplevels(subset(t, t$Adj != "none"))
nrow(cd.target) #680 = 68 Turkers x 10 adjectives
table(cd.target$SentenceType)
str(cd.target$Response)
table(cd.target$Response)
agr = aggregate(Response ~ SentenceType, data=cd.target, FUN="mean")
agr$CILow = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.low")$Response
agr$CIHigh = aggregate(Response ~ SentenceType, data=cd.target, FUN="ci.high")$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
dodge = position_dodge(.9)
agr
agr2 = aggregate(Response ~ Adj + SentenceType, data=cd.target, FUN="mean")
agr2
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj)) +
geom_text(data = subset(agr2, SentenceType == "less likely" & (Adj != "polite" & Adj != "wise" & Adj != "fortunate" & Adj != "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=1.3) +
geom_text(data = subset(agr2, SentenceType == "more likely" & (Adj == "polite" | Adj == "wise" | Adj == "fortunate" | Adj == "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=-.2) +
scale_x_discrete(name="Truth of generalization follows from common ground") +
scale_y_continuous(name="Proportion of `yes' responses")
#theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggsave(f="../graphs/proportion-ai-by-condition.pdf",height=4,width=3.8)
ggplot(agr, aes(x=SentenceType,y=Response,fill=SentenceType)) +
geom_bar(stat="identity",position=dodge) +
geom_bar(stat="identity",fill="grey90",position=dodge) +
theme(legend.position="none") +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=.25,position=dodge) +
geom_line(data=agr2, aes(x=SentenceType,y=Response,group=Adj,colour=Adj)) +
geom_text(data = subset(agr2, SentenceType == "less likely" & (Adj != "polite" & Adj != "wise" & Adj != "fortunate" & Adj != "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=1.3) +
geom_text(data = subset(agr2, SentenceType == "more likely" & (Adj == "polite" | Adj == "wise" | Adj == "fortunate" | Adj == "foolish")),
aes(label = Adj, size=12, colour = Adj),hjust=-.2) +
scale_x_discrete(name="Truth of generalization follows from common ground") +
scale_y_continuous(name="Proportion of `yes' responses")
#theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggsave(f="../graphs/proportion-ai-by-condition.pdf",height=4,width=3.9)
#theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())
ggsave(f="../graphs/proportion-ai-by-condition.pdf",height=4,width=4)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
# load required packages
library(tidyverse)
library(dplyr)
library(dichromat)
library(ggrepel)
theme_set(theme_bw())
# load cleaned, melded data file
load("../data/cd.RData")
nrow(cd) #1692 / 18 = 94 Turkers
names(cd)
head(cd)
# target items
d = droplevels(subset(cd, Condition != "filler"))
head(d)
# mean response to noE and E items
agr = aggregate(data=d, Response ~ Enough, FUN=mean)
agr
str(as.factor(d$Response))
acc = d %>%
#filter(ExpPart == "accept" & Condition %in% c("factive","implicative")) %>%
dplyr::select(workerid,Response,Enough) %>%
group_by(workerid,Enough) %>%
summarise(Mean = mean(Response)) %>%
spread(Enough, Mean)
acc = as.data.frame(acc)
head(acc)
acc$Diff = acc$noE - acc$E
row.names(acc) = acc$workerid
#acc$AccMean = imp[acc$workerid,]$Mean
head(acc)
# participants for whom 'adjective' at least as good as 'adjective enough'
nrow(acc[acc$Diff >= 0, ]) #20
# participants for whom 'adjective' just about as good as 'adjective enough'
nrow(acc[acc$Diff >= -0.25, ]) #23
nrow(acc[acc$Diff >= -0.5, ]) #27
acc$workerid2 <-factor(acc$workerid, levels=acc[order(acc$Diff), "workerid"])
ggplot(acc, aes(x=workerid2,y=Diff)) +
geom_point() +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),
panel.background = element_blank()) +
geom_segment(y=0,xend=0,y=0,yend=0,color='red') +
#geom_segment(y=0,yend=4.6,x=-Inf,xend=0,color='red')  +
scale_x_discrete(name="Participant") +
scale_y_continuous(name="Acceptability score")
ggsave("../graphs/acceptability-rating-difference.pdf",width=4.5,height=3)
ggplot(d, aes(x=Response, fill=Enough)) +
geom_histogram(position="dodge",binwidth = .5) +
labs(x = "Response", y = "count") +
scale_x_discrete(limits=c(1,2,3,4,5,6,7)) +
# for colored bars in talks
# scale_fill_discrete(name="",breaks=levels(d$Enough),labels=c("adjective enough","NEAS")) +
# for grey scale bars in paper:
scale_fill_grey(name="",breaks=levels(d$Enough),labels=c("adjective enough","NEAS")) +
theme(strip.text.x = element_blank(),
strip.background = element_rect(colour="white", fill="white"),
legend.position=c(.3,.75),
panel.background = element_blank())
ggplot(d, aes(x=as.factor(Response), fill=Enough)) +
geom_histogram(position="dodge") +
scale_x_discrete(name="Response") +
#scale_x_continuous(limits=c(1,7.5),breaks=seq(1,7)) +
facet_wrap(~workerid) +
scale_fill_discrete(name="",breaks=levels(d$Enough),labels=c("adj enough","adj"))
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('helpers.R')
# load required packages
library(tidyverse)
library(dplyr)
library(dichromat)
library(ggrepel)
theme_set(theme_bw())
# load cleaned, melded data file
load("../data/cd.RData")
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load packages
source('helpers.R')
library(tidyverse)
library(ordinal)
theme_set(theme_bw())
# load data
cd = read.csv(file="../data/cd.csv")
# load("../data/cd.RData")
# anonymize workerids and write to file
# cd = cd %>%
#   mutate(workerid = as.factor(as.numeric(factor(workerid))))
# write.csv(cd, file="../data/cd.csv",row.names = F,quote=F)
nrow(cd) #2144 (134 Turkers, each gave 16 judgments)
summary(cd)
# factors
str(cd$Condition)
cd$Condition = as.factor(cd$Condition)
str(cd$Response) #numerical
cd$Response = as.factor(cd$Response)
cd.target <- droplevels(subset(cd, cd$Condition != "filler"))
nrow(cd.target) #1340 = 134 Turkers x 10 judgments
table(cd.target$ConDissonant)
str(cd.target$ConDissonant)
cd.target$ConDissonant <- as.factor(cd.target$ConDissonant)
table(cd.target$Condition)
#CnC CnD CxC CxD
#338 330 332 340
# make new item column
names(cd.target)
table(cd.target$Adj)
table(cd.target$VPinf)
table(cd.target$Context)
cd.target$item <- paste(cd.target$Context,cd.target$Adj,cd.target$VPinf,"-")
table(cd.target$item)
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load packages
theme_set(theme_bw())
source('helpers.R')
library(tidyverse)
# load data
load("../data/cd.RData")
names(cd)
nrow(cd) #2144 (134 Turkers, each gave 16 judgments)
table(cd$Condition)
#CnC    CnD    CxC    CxD filler
#338    330    332    340    804
# target items
cd.target <- droplevels(subset(cd, cd$Condition != "filler"))
nrow(cd.target) #1340 = 134 Turkers x 10 items
names(cd.target)
t <- as.data.frame(table(cd.target$ID))
t
min(t$Freq) #9
max(t$Freq) #14
mean(t$Freq) #11.2
table(cd.target$ConDissonant)
table(cd.target$Condition,cd.target$ConDissonant)
agr = aggregate(data=cd.target, Response ~ ConDissonant + workerid, FUN=mean)
agr$Follows = as.factor(ifelse(agr$ConDissonant == "C","generalization follows","negation of generalization \n follows"))
agr
cons1 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 1.5),]
nrow(cons1) #35
cons2 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 2.5),]
nrow(cons2) #71
dis1 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 6.5),]
nrow(dis1) #23
dis2 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 5.5),]
nrow(dis2) #55
intersect(cons1$workerid,dis1$workerid) #1 Turker
intersect(cons2$workerid,dis2$workerid)
ggplot(agr, aes(x=Response,fill=ConDissonant)) +
geom_histogram(binwidth = 1,position="dodge",color="black") +
scale_x_continuous(name = "Mean projectivity rating",breaks = seq(1.5,6.5,1)) +
labs(y="count") +
#scale_fill_grey(name="ConDissonant",breaks=levels(agr$ConDissonant),labels=c("consonant","dissonant")) +
scale_fill_manual(values=c("lightgray","lightgray")) +
#theme(legend.title = element_blank()) +
theme(legend.position="none") +
facet_grid(. ~ Follows)
# evaluative adjectives, content/context, plots
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load packages
theme_set(theme_bw())
source('helpers.R')
library(tidyverse)
# load data
load("../data/cd.RData")
names(cd)
nrow(cd) #2144 (134 Turkers, each gave 16 judgments)
table(cd$Condition)
#CnC    CnD    CxC    CxD filler
#338    330    332    340    804
# target items
cd.target <- droplevels(subset(cd, cd$Condition != "filler"))
nrow(cd.target) #1340 = 134 Turkers x 10 items
names(cd.target)
# number of responses per item
t <- as.data.frame(table(cd.target$ID))
t
min(t$Freq) #9
max(t$Freq) #14
mean(t$Freq) #11.2
# plot of mean response by condition
agr = aggregate(data=cd.target, Response ~ Condition, FUN=mean)
agr$CILow = aggregate(data=cd.target, Response ~ Condition, FUN=ci.low)$Response
agr$CIHigh = aggregate(data=cd.target, Response ~ Condition, FUN=ci.high)$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
agr$Type = as.factor(ifelse(agr$Condition %in% c("CnC","CnD"),"Content","Context"))
agr$ConDiss = as.factor(ifelse(agr$Condition %in% c("CnC","CxC"),"generalization \n follows","negation of \n generalization \n follows"))
agr
ggplot(agr, aes(x=ConDiss,y=Response)) +
geom_point() +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.25) +
scale_x_discrete(name="") +
scale_y_continuous(name="Mean certainty rating") +
facet_wrap(~Type) +
theme(strip.text.x = element_text(face="bold",size=12))
ggsave(f="../graphs/targetmeans-by-condition.pdf",height=2.5,width=5)
# plot of mean response by condition, not collapsing over adjectives
agr = aggregate(data=cd.target, Response ~ Condition + Adj, FUN=mean)
agr$CILow = aggregate(data=cd.target, Response ~ Condition + Adj, FUN=ci.low)$Response
agr$CIHigh = aggregate(data=cd.target, Response ~ Condition + Adj, FUN=ci.high)$Response
agr$YMin = agr$Response - agr$CILow
agr$YMax = agr$Response + agr$CIHigh
agr$Type = as.factor(ifelse(agr$Condition %in% c("CnC","CnD"),"Content","Context"))
agr$ConDiss = as.factor(ifelse(agr$Condition %in% c("CnC","CxC"),"generalization \n follows","negation of \n generalization \n follows"))
agr
ggplot(agr, aes(x=ConDiss,y=Response)) +
geom_point() +
geom_errorbar(aes(ymin=YMin,ymax=YMax),width=0.25) +
scale_x_discrete(name="") +
scale_y_continuous(name="Mean certainty rating") +
facet_grid(Adj~Type) +
theme(strip.text.x = element_text(face="bold",size=12))
ggsave(f="../graphs/targetmeans-by-condition-and-adj.pdf",height=10,width=4.5)
# consistency score
table(cd.target$ConDissonant)
table(cd.target$Condition,cd.target$ConDissonant)
agr = aggregate(data=cd.target, Response ~ ConDissonant + workerid, FUN=mean)
agr$Follows = as.factor(ifelse(agr$ConDissonant == "C","more likely","less likely"))
agr
agr
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load packages
theme_set(theme_bw())
source('helpers.R')
library(tidyverse)
# load data
load("../data/cd.RData")
names(cd)
nrow(cd) #2144 (134 Turkers, each gave 16 judgments)
table(cd$Condition)
#CnC    CnD    CxC    CxD filler
#338    330    332    340    804
# target items
cd.target <- droplevels(subset(cd, cd$Condition != "filler"))
nrow(cd.target) #1340 = 134 Turkers x 10 items
names(cd.target)
# number of responses per item
t <- as.data.frame(table(cd.target$ID))
t
min(t$Freq) #9
max(t$Freq) #14
mean(t$Freq)
table(cd.target$ConDissonant)
table(cd.target$Condition,cd.target$ConDissonant)
agr = aggregate(data=cd.target, Response ~ ConDissonant + workerid, FUN=mean)
agr$Follows = as.factor(ifelse(agr$ConDissonant == "C","more likely","less likely"))
agr
cons1 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 1.5),]
nrow(cons1) #35
cons2 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 2.5),]
nrow(cons2) #71
dis1 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 6.5),]
nrow(dis1) #23
dis2 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 5.5),]
nrow(dis2)
intersect(cons1$workerid,dis1$workerid) #1 Turker
intersect(cons2$workerid,dis2$workerid) #19 Turkers
# make histogram that shows what kinds of participants there are
ggplot(agr, aes(x=Response,fill=ConDissonant)) +
geom_histogram(binwidth = 1,position="dodge",color="black") +
scale_x_continuous(name = "Mean projectivity rating",breaks = seq(1.5,6.5,1)) +
labs(y="count") +
#scale_fill_grey(name="ConDissonant",breaks=levels(agr$ConDissonant),labels=c("consonant","dissonant")) +
scale_fill_manual(values=c("lightgray","lightgray")) +
#theme(legend.title = element_blank()) +
theme(legend.position="none") +
facet_grid(. ~ Follows)
ggsave(f="../graphs/count-of-participants.pdf",height=2.5,width=5)
table(cd.target$ConDissonant)
table(cd.target$Condition,cd.target$ConDissonant)
agr = aggregate(data=cd.target, Response ~ ConDissonant + workerid, FUN=mean)
agr$Follows = as.factor(ifelse(agr$ConDissonant == "C","generalization more likely","generalization less likely"))
agr
cons1 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 1.5),]
nrow(cons1) #35
cons2 <- agr[ which(agr$ConDissonant=="C" & agr$Response <= 2.5),]
nrow(cons2) #71
dis1 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 6.5),]
nrow(dis1) #23
dis2 <- agr[ which(agr$ConDissonant=="D" & agr$Response >= 5.5),]
nrow(dis2) #55
intersect(cons1$workerid,dis1$workerid) #1 Turker
intersect(cons2$workerid,dis2$workerid) #19 Turkers
# make histogram that shows what kinds of participants there are
ggplot(agr, aes(x=Response,fill=ConDissonant)) +
geom_histogram(binwidth = 1,position="dodge",color="black") +
scale_x_continuous(name = "Mean projectivity rating",breaks = seq(1.5,6.5,1)) +
labs(y="count") +
#scale_fill_grey(name="ConDissonant",breaks=levels(agr$ConDissonant),labels=c("consonant","dissonant")) +
scale_fill_manual(values=c("lightgray","lightgray")) +
#theme(legend.title = element_blank()) +
theme(legend.position="none") +
facet_grid(. ~ Follows)
ggsave(f="../graphs/count-of-participants.pdf",height=2.5,width=5)
ggplot(agr, aes(x=Response,fill=ConDissonant)) +
geom_histogram(binwidth = 1,position="dodge",color="black") +
scale_x_continuous(name = "Mean projectivity rating",breaks = seq(1.5,6.5,1)) +
scale_y_continuous(name = "Number of participants") +
labs(y="count") +
#scale_fill_grey(name="ConDissonant",breaks=levels(agr$ConDissonant),labels=c("consonant","dissonant")) +
scale_fill_manual(values=c("lightgray","lightgray")) +
#theme(legend.title = element_blank()) +
theme(legend.position="none") +
facet_grid(. ~ Follows)
ggsave(f="../graphs/count-of-participants.pdf",height=2.5,width=5)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
theme_set(theme_bw())
source('../../helpers.R')
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# load the data
d <- read_csv("../data/d.csv")
# load required packages
library(tidyverse)
library(ggrepel)
library(dichromat)
library(forcats)
library(RColorBrewer)
library(curl) # to read data from github repo
library(gridExtra)
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
theme_set(theme_bw())
source('../../helpers.R')
# color-blind-friendly palette
cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# load the data
d <- read_csv("../data/d.csv")
nrow(d) #10100
# sort predicates by projection mean
proj.means = d %>%
group_by(short_trigger) %>%
summarize(Mean_proj = mean(projective)) %>%
mutate(short_trigger = fct_rev(fct_reorder(as.factor(short_trigger),Mean_proj)))
proj.means
